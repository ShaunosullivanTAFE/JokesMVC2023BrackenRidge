@model IEnumerable<JokesMVC2023.Models.Data.Joke>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>


<div class="border shadow rounded p-2 m-4 row">
    <div class="col-10">
        <input type="text" class="form-control" id="jokeSearch" placeholder="Search on Joke Question or Answer" />
    </div>
    <div class="col text-center">
        <input type="button" class="btn btn-primary" value="Search" id="btnSearch" />
    </div>
</div>


<input type="button" value="Show Create" class="btn btn-outline-dark" onclick="showCreateModal()" />

<div id="JokeTableContainer">
    <partial name="_JokeTable.cshtml" />
</div>



<div class="modal" id="JokeModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="ModalTitle"></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="ModalBody">
        <p>Modal body text goes here.</p>
      </div>
    </div>
  </div>
</div>

<div class="modal" id="SpinnerModal" tabindex="-1" data-bs-backdrop="false">
  <div class="modal-dialog modal-dialog-centered d-flex justify-content-center">
      <div class="spinner-container">
        <span></span>
        <span></span>
        <span></span>
        <span></span>
      </div>
  </div>
</div>

<div class="modal fade" id="addJokeToListModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">

                <h5 class="modal-title">Add Joke To List</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="modalBody">

                <form id="addJokeToListForm">
                    <div class="row justify-content-evenly">
                        <div class="col-6" id="ddlContainer">
                            <select class="form-select" disabled>
                                <option>Loading....</option>
                            </select>
                        </div>
                        <div class="col-3">
                            <input type="submit" value="Add Joke" class="btn btn-success" />
                        </div>
                    </div>
                </form>

            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken();

<script>

    window.addEventListener('load', (e) => {
        document.getElementById('addJokeToListForm').addEventListener('submit', async (e) => {
            handleAddJokeToList(e);
        })

        document.getElementById('jokeSearch').addEventListener('keyup', async (e) => {
            if(e.keyCode == 13){
                updateTableForFilter(e.target.value)
            }
        })

        document.getElementById('btnSearch').addEventListener('click', async (e) => {

            updateTableForFilter(document.getElementById('jokeSearch').value)

        })
    })

    async function updateTableForSearch(query){

        // send a request to the Server with the query

        // Update the table based on the results

    }

    async function addToFavourites(jokeId) {

        sessionStorage.setItem('selectedJokeId', jokeId);

        $('#addJokeToListModal').modal('show');

        let result = await fetch('/Favourite/FavouriteListDDL');
        let resultHtml = await result.text();
        document.getElementById('ddlContainer').innerHTML = resultHtml;


    }

    async function handleAddJokeToList(e) {
        e.preventDefault();
        console.log('event fired')
        let jokeId = sessionStorage.getItem('selectedJokeId');
        let listID = e.target['favouriteList'].selectedOptions[0].value

        if (listID == 0) { return; }

        let favListItem = {
            FavouriteListId: listID,
            JokeId: jokeId
        }

        let result = await fetch('/Favourite/AddJokeToList', {
            method: 'POST',
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify(favListItem)
        });

        if (result.status == 400) {
            console.log(result)
            alert('The selected list already contains this joke')
            return;
        } else if (result.ok) {
            $('#addJokeToListModal').modal('hide');
        }



    }

    function showSpinner(){
      $('#SpinnerModal').modal('show')
    }

    function hideSpinner(){
      $('#SpinnerModal').modal('hide')
    }

    async function startTimer(){
        setInterval(async (e) => {
            updateTable();
        }, 1000)
    }

    async function updateTable(){
        // Send a GET request to the /Joke/JokeTablePartial endpoint
        let response = await advFetch('/Joke/JokeTablePartial');

        // Parse the results as text
        let htmlResponse = await response.text();

        // overwrite the JokeTableContainer innerHTML with the new data
        document.getElementById('JokeTableContainer').innerHTML = htmlResponse;
    }

    async function updateTableForFilter(query){
        // Send a GET request to the /Joke/JokeTablePartial endpoint
        let response = await advFetch('/Joke/JokeTablePartial?query=' + query);

        // Parse the results as text
        let htmlResponse = await response.text();

        // overwrite the JokeTableContainer innerHTML with the new data
        document.getElementById('JokeTableContainer').innerHTML = htmlResponse;
    }

    async function deleteConfirm(id){

      // Confirm Dialog
      if(confirm("Are you sure you want to delete Joke with ID: " + id)){
        showSpinner();
        // Fetch Request
        await advFetch('/Joke/Delete?id='+id,{method: "DELETE"})
        // Update Table
        await updateTable();

        hideSpinner();

      }


    }

    async function showEditModal(id){
      showSpinner();
      let response = await advFetch('/Joke/Edit?id='+id);
      let htmlResponse = await response.text();

      document.getElementById('ModalBody').innerHTML = htmlResponse;
      document.getElementById('ModalTitle').innerHTML = "Edit Joke";

      let formReference = document.querySelector('form[action="/Joke/Edit"]');

      console.log(formReference)

      formReference.addEventListener('submit', (e) => { handleEditSubmit(e, id) });
      hideSpinner();
      $('#JokeModal').modal('show');
    }

    async function showCreateModal(){

        let response = await advFetch('/Joke/Create');
        let htmlResponse = await response.text();
        document.getElementById('ModalBody').innerHTML = htmlResponse;
        document.getElementById('ModalTitle').innerHTML = "Create Joke";
        // get a reference to the form

        let formReference = document.querySelector('form[action="/Joke/Create"]');

        // Parse the validation rules on the individual Input fields
        $.validator.unobtrusive.parse(formReference);

        console.log(formReference);

        formReference.addEventListener("submit", (e) => { handleCreateSubmit(e) });

        $('#JokeModal').modal('show');
    }

    async function handleEditSubmit(e, id){
        e.preventDefault();

        let form = e.target;

        let jokeData = {
          id: id,
          jokeQuestion: form["JokeQuestion"].value,
          jokeAnswer: form["JokeAnswer"].value
        };

        let response = await advFetch('/Joke/Edit?id='+id, {
          method: 'PUT',
          headers: {
            'content-type': 'application/json'
          },
          body: JSON.stringify(jokeData)
        });

        updateTable();

        $('#JokeModal').modal('hide');

    }

    async function handleCreateSubmit(e) {
        e.preventDefault();

        let form = $(e.target);
        if(!form.valid()){
          return;
        }

        let button = document.getElementById('btnCreate');

        button.setAttribute('disabled', 'disabled');
        button.innerHTML = `                    
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Loading...
          `;


        // Extract a JSON object





        let jokeData = {
            jokeQuestion: e.target["JokeQuestion"].value,
            jokeAnswer: e.target["JokeAnswer"].value
        };



        // POST the joke to the controller
        let response = await advFetch('/Joke/Create', {
            method: "POST",
            headers: {
                'content-type': 'application/json'
            },
            body: JSON.stringify(jokeData)
        });

        if(response.ok){
          console.log(jokeData);

          updateTable();

          $('#JokeModal').modal('hide');

          if(response.status == 201){
            let joke = await response.json();
            console.log(joke.id);
            localStorage.setItem('JokeID', joke.id);
          }
        }

          button.removeAttribute('disabled');
          button.innerHTML = 'Create';
       


    }

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}