// <auto-generated />
using System;
using JokesMVC2023.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JokesMVC2023.Migrations
{
    [DbContext(typeof(JokeDBContext))]
    [Migration("20230505013523_Favourite Feature")]
    partial class FavouriteFeature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JokesMVC2023.Models.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.FavouriteList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteLists");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.FavouriteListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FavouriteListId")
                        .HasColumnType("int");

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FavouriteListId");

                    b.HasIndex("JokeId");

                    b.ToTable("FavouriteListItems");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.Joke", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("JokeAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JokeQuestion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Jokes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JokeAnswer = "A regular expression.",
                            JokeQuestion = "What do you get if you lock a monkey in a room with a typewriter for 8 hours?"
                        },
                        new
                        {
                            Id = 2,
                            JokeAnswer = "Put a Windows user in front of Vim and tell them to exit.",
                            JokeQuestion = "How do you generate a random string?"
                        },
                        new
                        {
                            Id = 3,
                            JokeAnswer = "She had one-to-many relationships.",
                            JokeQuestion = "Why did the database administrator leave his wife?"
                        },
                        new
                        {
                            Id = 4,
                            JokeAnswer = "None. It's a hardware problem.",
                            JokeQuestion = "How many programmers does it take to screw in a light bulb?"
                        },
                        new
                        {
                            Id = 5,
                            JokeAnswer = "He keeps dropping the database.",
                            JokeQuestion = "Why does no one like SQLrillex?"
                        },
                        new
                        {
                            Id = 6,
                            JokeAnswer = "They work below C-level.",
                            JokeQuestion = "Why are Assembly programmers always soaking wet?"
                        },
                        new
                        {
                            Id = 7,
                            JokeAnswer = "Attire.",
                            JokeQuestion = "What's the difference between a poorly dressed man on a unicycle and a well dressed man on a bicycle?"
                        },
                        new
                        {
                            Id = 8,
                            JokeAnswer = "Tooth hurt-y.",
                            JokeQuestion = "What time did the man go to the dentist?"
                        },
                        new
                        {
                            Id = 9,
                            JokeAnswer = "It has an ex axis and a why axis.",
                            JokeQuestion = "So I made a graph of all my past relationships."
                        },
                        new
                        {
                            Id = 10,
                            JokeAnswer = "They told me I wasn't putting in enough shifts.",
                            JokeQuestion = "I just got fired from my job at the keyboard factory."
                        });
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.FavouriteList", b =>
                {
                    b.HasOne("JokesMVC2023.Models.Data.AppUser", "User")
                        .WithMany("FavoriteLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.FavouriteListItem", b =>
                {
                    b.HasOne("JokesMVC2023.Models.Data.FavouriteList", "FavouriteList")
                        .WithMany("FavouriteListItems")
                        .HasForeignKey("FavouriteListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JokesMVC2023.Models.Data.Joke", "Joke")
                        .WithMany("FavouriteListItems")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FavouriteList");

                    b.Navigation("Joke");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.AppUser", b =>
                {
                    b.Navigation("FavoriteLists");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.FavouriteList", b =>
                {
                    b.Navigation("FavouriteListItems");
                });

            modelBuilder.Entity("JokesMVC2023.Models.Data.Joke", b =>
                {
                    b.Navigation("FavouriteListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
